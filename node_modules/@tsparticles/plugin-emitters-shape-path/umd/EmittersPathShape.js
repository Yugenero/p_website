(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/plugin-emitters", "@tsparticles/engine", "./utils.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmittersPathShape = void 0;
    const plugin_emitters_1 = require("@tsparticles/plugin-emitters");
    const engine_1 = require("@tsparticles/engine");
    const utils_js_1 = require("./utils.js");
    const half = 0.5;
    class EmittersPathShape extends plugin_emitters_1.EmitterShapeBase {
        constructor(position, size, fill, options) {
            super(position, size, fill, options);
            const ctx = document.createElement("canvas").getContext("2d");
            if (!ctx) {
                throw new Error(`${engine_1.errorPrefix} No 2d context available`);
            }
            this.checkContext = ctx;
            this.points = options.points;
            const pathData = this.points, path = new Path2D(), offset = {
                x: position.x - size.width * half,
                y: position.y - size.height * half,
            };
            for (const [index, point] of pathData.entries()) {
                const coords = {
                    x: offset.x + (point.x * size.width) / engine_1.percentDenominator,
                    y: offset.y + (point.y * size.height) / engine_1.percentDenominator,
                };
                if (!index) {
                    path.moveTo(coords.x, coords.y);
                }
                else {
                    path.lineTo(coords.x, coords.y);
                }
            }
            const firstIndex = 0, firstPathData = pathData[firstIndex];
            if (firstPathData) {
                const coords = {
                    x: offset.x + (firstPathData.x * size.width) / engine_1.percentDenominator,
                    y: offset.y + (firstPathData.y * size.height) / engine_1.percentDenominator,
                };
                path.lineTo(coords.x, coords.y);
            }
            this.path = path;
        }
        async init() {
        }
        randomPosition() {
            const ctx = this.checkContext, position = this.position, size = this.size, fill = this.fill, path = this.path, res = fill
                ? (0, utils_js_1.generateRandomPointWithinPath)(ctx, path, position, size)
                : (0, utils_js_1.generateRandomPointOnPathPerimeter)(ctx, path, position, size);
            return res ? { position: res } : null;
        }
        resize(position, size) {
            super.resize(position, size);
            const pathData = this.points, path = new Path2D(), offset = {
                x: position.x - size.width * half,
                y: position.y - size.height * half,
            };
            for (const [index, point] of pathData.entries()) {
                const coords = {
                    x: offset.x + (point.x * size.width) / engine_1.percentDenominator,
                    y: offset.y + (point.y * size.height) / engine_1.percentDenominator,
                };
                if (!index) {
                    path.moveTo(coords.x, coords.y);
                }
                else {
                    path.lineTo(coords.x, coords.y);
                }
            }
            const firstIndex = 0, firstPathData = pathData[firstIndex];
            if (firstPathData) {
                const coords = {
                    x: offset.x + (firstPathData.x * size.width) / engine_1.percentDenominator,
                    y: offset.y + (firstPathData.y * size.height) / engine_1.percentDenominator,
                };
                path.lineTo(coords.x, coords.y);
            }
            this.path = path;
        }
    }
    exports.EmittersPathShape = EmittersPathShape;
});
