(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/InteractivityParticle.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InteractivityParticleMaker = void 0;
    const engine_1 = require("@tsparticles/engine");
    const InteractivityParticle_js_1 = require("./Options/Classes/InteractivityParticle.js");
    const particleMode = "particle";
    class InteractivityParticleMaker extends engine_1.ExternalInteractorBase {
        constructor(container) {
            super(container);
        }
        clear() {
        }
        init() {
        }
        interact() {
            const container = this.container, { interactivity } = container, options = container.actualOptions;
            if (!container.retina.reduceFactor) {
                return;
            }
            const mousePos = interactivity.mouse.position, interactivityParticleOptions = options.interactivity.modes.particle;
            if (!interactivityParticleOptions) {
                return;
            }
            const mouseStopped = interactivityParticleOptions.pauseOnStop &&
                (interactivity.mouse.position === this._lastPosition ||
                    (interactivity.mouse.position?.x === this._lastPosition?.x &&
                        interactivity.mouse.position?.y === this._lastPosition?.y)), clearDelay = interactivityParticleOptions.stopDelay;
            if (mousePos) {
                this._lastPosition = { ...mousePos };
            }
            else {
                delete this._lastPosition;
            }
            if (!this._lastPosition) {
                return;
            }
            if (mouseStopped) {
                if (this._clearTimeout) {
                    return;
                }
                this._clearTimeout = setTimeout(() => {
                    if (!this._particle) {
                        return;
                    }
                    if (interactivityParticleOptions.replaceCursor) {
                        const element = interactivity.element;
                        if (element) {
                            if (element instanceof Window) {
                                document.body.style.cursor = "";
                            }
                            else {
                                element.style.cursor = "";
                            }
                        }
                    }
                    this.container.particles.remove(this._particle, undefined, true);
                    delete this._particle;
                }, clearDelay);
                return;
            }
            if (this._clearTimeout) {
                clearTimeout(this._clearTimeout);
                delete this._clearTimeout;
            }
            if (!this._particle) {
                const particleOptions = (0, engine_1.deepExtend)(interactivityParticleOptions.options, {
                    move: {
                        enable: false,
                    },
                });
                this._particle = container.particles.addParticle(this._lastPosition, particleOptions);
                if (interactivityParticleOptions.replaceCursor) {
                    const element = interactivity.element;
                    if (element) {
                        if (element instanceof Window) {
                            document.body.style.cursor = "none";
                        }
                        else {
                            element.style.cursor = "none";
                        }
                    }
                }
            }
            if (!this._particle) {
                return;
            }
            this._particle.position.x = this._lastPosition.x;
            this._particle.position.y = this._lastPosition.y;
        }
        isEnabled(particle) {
            const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;
            return ((mouse.clicking && mouse.inside && !!mouse.position && (0, engine_1.isInArray)(particleMode, events.onClick.mode)) ||
                (mouse.inside && !!mouse.position && (0, engine_1.isInArray)(particleMode, events.onHover.mode)));
        }
        loadModeOptions(options, ...sources) {
            if (!options.particle) {
                options.particle = new InteractivityParticle_js_1.InteractivityParticle();
            }
            for (const source of sources) {
                options.particle.load(source?.particle);
            }
        }
        reset() {
        }
    }
    exports.InteractivityParticleMaker = InteractivityParticleMaker;
});
