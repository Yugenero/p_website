(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Infecter.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InfectionInstance = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Infecter_js_1 = require("./Infecter.js");
    const minStage = 0;
    class InfectionInstance {
        constructor(container) {
            this._container = container;
            this._container.infecter = new Infecter_js_1.Infecter(this._container);
        }
        particleFillColor(particle) {
            const options = this._container.actualOptions;
            if (!particle.infection || !options.infection) {
                return;
            }
            const infectionStage = particle.infection.stage, infection = options.infection, infectionStages = infection.stages;
            return infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;
        }
        particleStrokeColor(particle) {
            return this.particleFillColor(particle);
        }
        particlesSetup() {
            const options = this._container.actualOptions;
            if (!options.infection) {
                return;
            }
            for (let i = 0; i < options.infection.infections; i++) {
                const notInfected = this._container.particles.filter(p => {
                    const infP = p;
                    if (!infP.infection) {
                        infP.infection = {};
                    }
                    return infP.infection.stage === undefined;
                });
                const infected = (0, engine_1.itemFromArray)(notInfected);
                this._container.infecter?.startInfection(infected, minStage);
            }
        }
    }
    exports.InfectionInstance = InfectionInstance;
});
