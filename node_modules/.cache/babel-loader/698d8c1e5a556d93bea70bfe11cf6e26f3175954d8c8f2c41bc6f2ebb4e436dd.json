{"ast":null,"code":"import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers) {\n  let force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let res = map.get(container);\n  if (!res || force) {\n    res = await Promise.all([...initializers.values()].map(t => t(container)));\n    map.set(container, res);\n  }\n  return res;\n}\nasync function getDataFromUrl(data) {\n  const url = itemFromSingleOrMultiple(data.url, data.index);\n  if (!url) {\n    return data.fallback;\n  }\n  const response = await fetch(url);\n  if (response.ok) {\n    return await response.json();\n  }\n  getLogger().error(\"\".concat(errorPrefix, \" \").concat(response.status, \" while retrieving config file\"));\n  return data.fallback;\n}\nconst generatedTrue = \"true\",\n  generatedFalse = \"false\",\n  canvasTag = \"canvas\",\n  getCanvasFromContainer = domContainer => {\n    let canvasEl;\n    if (domContainer instanceof HTMLCanvasElement || domContainer.tagName.toLowerCase() === canvasTag) {\n      canvasEl = domContainer;\n      if (!canvasEl.dataset[generatedAttribute]) {\n        canvasEl.dataset[generatedAttribute] = generatedFalse;\n      }\n    } else {\n      const existingCanvases = domContainer.getElementsByTagName(canvasTag);\n      if (existingCanvases.length) {\n        const firstIndex = 0;\n        canvasEl = existingCanvases[firstIndex];\n        canvasEl.dataset[generatedAttribute] = generatedFalse;\n      } else {\n        canvasEl = document.createElement(canvasTag);\n        canvasEl.dataset[generatedAttribute] = generatedTrue;\n        domContainer.appendChild(canvasEl);\n      }\n    }\n    const fullPercent = \"100%\";\n    if (!canvasEl.style.width) {\n      canvasEl.style.width = fullPercent;\n    }\n    if (!canvasEl.style.height) {\n      canvasEl.style.height = fullPercent;\n    }\n    return canvasEl;\n  },\n  getDomContainer = (id, source) => {\n    let domContainer = source !== null && source !== void 0 ? source : document.getElementById(id);\n    if (domContainer) {\n      return domContainer;\n    }\n    domContainer = document.createElement(\"div\");\n    domContainer.id = id;\n    domContainer.dataset[generatedAttribute] = generatedTrue;\n    document.body.append(domContainer);\n    return domContainer;\n  };\nexport class Engine {\n  constructor() {\n    this._configs = new Map();\n    this._domArray = [];\n    this._eventDispatcher = new EventDispatcher();\n    this._initialized = false;\n    this.plugins = [];\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.effectDrawers = new Map();\n    this.shapeDrawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  get configs() {\n    const res = {};\n    for (const [name, config] of this._configs) {\n      res[name] = config;\n    }\n    return res;\n  }\n  get items() {\n    return this._domArray;\n  }\n  get version() {\n    return \"3.4.0\";\n  }\n  addConfig(config) {\n    var _ref, _config$key;\n    const key = (_ref = (_config$key = config.key) !== null && _config$key !== void 0 ? _config$key : config.name) !== null && _ref !== void 0 ? _ref : \"default\";\n    this._configs.set(key, config);\n    this._eventDispatcher.dispatchEvent(EventType.configAdded, {\n      data: {\n        name: key,\n        config\n      }\n    });\n  }\n  async addEffect(effect, drawer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    executeOnSingleOrMultiple(effect, type => {\n      if (!this.getEffectDrawer(type)) {\n        this.effectDrawers.set(type, drawer);\n      }\n    });\n    await this.refresh(refresh);\n  }\n  addEventListener(type, listener) {\n    this._eventDispatcher.addEventListener(type, listener);\n  }\n  async addInteractor(name, interactorInitializer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._initializers.interactors.set(name, interactorInitializer);\n    await this.refresh(refresh);\n  }\n  async addMover(name, moverInitializer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._initializers.movers.set(name, moverInitializer);\n    await this.refresh(refresh);\n  }\n  async addParticleUpdater(name, updaterInitializer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._initializers.updaters.set(name, updaterInitializer);\n    await this.refresh(refresh);\n  }\n  async addPathGenerator(name, generator) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!this.getPathGenerator(name)) {\n      this.pathGenerators.set(name, generator);\n    }\n    await this.refresh(refresh);\n  }\n  async addPlugin(plugin) {\n    let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n    await this.refresh(refresh);\n  }\n  async addPreset(preset, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let refresh = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (override || !this.getPreset(preset)) {\n      this.presets.set(preset, options);\n    }\n    await this.refresh(refresh);\n  }\n  async addShape(drawer) {\n    let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    for (const validType of drawer.validTypes) {\n      if (this.getShapeDrawer(validType)) {\n        continue;\n      }\n      this.shapeDrawers.set(validType, drawer);\n    }\n    await this.refresh(refresh);\n  }\n  clearPlugins(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  dispatchEvent(type, args) {\n    this._eventDispatcher.dispatchEvent(type, args);\n  }\n  dom() {\n    return this.items;\n  }\n  domItem(index) {\n    return this.item(index);\n  }\n  async getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      if (plugin.needsPlugin(container.actualOptions)) {\n        res.set(plugin.id, await plugin.getPlugin(container));\n      }\n    }\n    return res;\n  }\n  getEffectDrawer(type) {\n    return this.effectDrawers.get(type);\n  }\n  async getInteractors(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n  async getMovers(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.shapeDrawers.get(type);\n  }\n  getSupportedEffects() {\n    return this.effectDrawers.keys();\n  }\n  getSupportedShapes() {\n    return this.shapeDrawers.keys();\n  }\n  async getUpdaters(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n  init() {\n    if (this._initialized) {\n      return;\n    }\n    this._initialized = true;\n  }\n  item(index) {\n    const {\n        items\n      } = this,\n      item = items[index];\n    if (!item || item.destroyed) {\n      const deleteCount = 1;\n      items.splice(index, deleteCount);\n      return;\n    }\n    return item;\n  }\n  async load(params) {\n    var _ref2, _params$id, _params$element;\n    const randomFactor = 10000,\n      id = (_ref2 = (_params$id = params.id) !== null && _params$id !== void 0 ? _params$id : (_params$element = params.element) === null || _params$element === void 0 ? void 0 : _params$element.id) !== null && _ref2 !== void 0 ? _ref2 : \"tsparticles\".concat(Math.floor(getRandom() * randomFactor)),\n      {\n        index,\n        url\n      } = params,\n      options = url ? await getDataFromUrl({\n        fallback: params.options,\n        url,\n        index\n      }) : params.options;\n    const currentOptions = itemFromSingleOrMultiple(options, index),\n      {\n        items\n      } = this,\n      oldIndex = items.findIndex(v => v.id.description === id),\n      minIndex = 0,\n      newItem = new Container(this, id, currentOptions);\n    if (oldIndex >= minIndex) {\n      const old = this.item(oldIndex),\n        one = 1,\n        none = 0,\n        deleteCount = old ? one : none;\n      if (old && !old.destroyed) {\n        old.destroy(false);\n      }\n      items.splice(oldIndex, deleteCount, newItem);\n    } else {\n      items.push(newItem);\n    }\n    const domContainer = getDomContainer(id, params.element),\n      canvasEl = getCanvasFromContainer(domContainer);\n    newItem.canvas.loadCanvas(canvasEl);\n    await newItem.start();\n    return newItem;\n  }\n  loadOptions(options, sourceOptions) {\n    this.plugins.forEach(plugin => {\n      var _plugin$loadOptions;\n      return (_plugin$loadOptions = plugin.loadOptions) === null || _plugin$loadOptions === void 0 ? void 0 : _plugin$loadOptions.call(plugin, options, sourceOptions);\n    });\n  }\n  loadParticlesOptions(container, options) {\n    for (var _len = arguments.length, sourceOptions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      sourceOptions[_key - 2] = arguments[_key];\n    }\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    updaters.forEach(updater => {\n      var _updater$loadOptions;\n      return (_updater$loadOptions = updater.loadOptions) === null || _updater$loadOptions === void 0 ? void 0 : _updater$loadOptions.call(updater, options, ...sourceOptions);\n    });\n  }\n  async refresh() {\n    let refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!refresh) {\n      return;\n    }\n    await Promise.all(this.items.map(t => t.refresh()));\n  }\n  removeEventListener(type, listener) {\n    this._eventDispatcher.removeEventListener(type, listener);\n  }\n  setOnClickHandler(callback) {\n    const {\n      items\n    } = this;\n    if (!items.length) {\n      throw new Error(\"\".concat(errorPrefix, \" can only set click handlers after calling tsParticles.load()\"));\n    }\n    items.forEach(item => item.addClickHandler(callback));\n  }\n}","map":{"version":3,"names":["errorPrefix","generatedAttribute","executeOnSingleOrMultiple","getLogger","itemFromSingleOrMultiple","Container","EventDispatcher","EventType","getRandom","getItemsFromInitializer","container","map","initializers","force","arguments","length","undefined","res","get","Promise","all","values","t","set","getDataFromUrl","data","url","index","fallback","response","fetch","ok","json","error","concat","status","generatedTrue","generatedFalse","canvasTag","getCanvasFromContainer","domContainer","canvasEl","HTMLCanvasElement","tagName","toLowerCase","dataset","existingCanvases","getElementsByTagName","firstIndex","document","createElement","appendChild","fullPercent","style","width","height","getDomContainer","id","source","getElementById","body","append","Engine","constructor","_configs","Map","_domArray","_eventDispatcher","_initialized","plugins","_initializers","interactors","movers","updaters","presets","effectDrawers","shapeDrawers","pathGenerators","configs","name","config","items","version","addConfig","_ref","_config$key","key","dispatchEvent","configAdded","addEffect","effect","drawer","refresh","type","getEffectDrawer","addEventListener","listener","addInteractor","interactorInitializer","addMover","moverInitializer","addParticleUpdater","updaterInitializer","addPathGenerator","generator","getPathGenerator","addPlugin","plugin","getPlugin","push","addPreset","preset","options","override","getPreset","addShape","validType","validTypes","getShapeDrawer","clearPlugins","delete","args","dom","domItem","item","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","getSupportedEffects","keys","getSupportedShapes","getUpdaters","init","destroyed","deleteCount","splice","load","params","_ref2","_params$id","_params$element","randomFactor","element","Math","floor","currentOptions","oldIndex","findIndex","v","description","minIndex","newItem","old","one","none","destroy","canvas","loadCanvas","start","loadOptions","sourceOptions","forEach","_plugin$loadOptions","call","loadParticlesOptions","_len","Array","_key","updater","_updater$loadOptions","removeEventListener","setOnClickHandler","callback","Error","addClickHandler"],"sources":["/Users/nero/Desktop/local_workspace/p_website/node_modules/@tsparticles/engine/browser/Core/Engine.js"],"sourcesContent":["import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = await Promise.all([...initializers.values()].map(t => t(container)));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return (await response.json());\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nconst generatedTrue = \"true\", generatedFalse = \"false\", canvasTag = \"canvas\", getCanvasFromContainer = (domContainer) => {\n    let canvasEl;\n    if (domContainer instanceof HTMLCanvasElement || domContainer.tagName.toLowerCase() === canvasTag) {\n        canvasEl = domContainer;\n        if (!canvasEl.dataset[generatedAttribute]) {\n            canvasEl.dataset[generatedAttribute] = generatedFalse;\n        }\n    }\n    else {\n        const existingCanvases = domContainer.getElementsByTagName(canvasTag);\n        if (existingCanvases.length) {\n            const firstIndex = 0;\n            canvasEl = existingCanvases[firstIndex];\n            canvasEl.dataset[generatedAttribute] = generatedFalse;\n        }\n        else {\n            canvasEl = document.createElement(canvasTag);\n            canvasEl.dataset[generatedAttribute] = generatedTrue;\n            domContainer.appendChild(canvasEl);\n        }\n    }\n    const fullPercent = \"100%\";\n    if (!canvasEl.style.width) {\n        canvasEl.style.width = fullPercent;\n    }\n    if (!canvasEl.style.height) {\n        canvasEl.style.height = fullPercent;\n    }\n    return canvasEl;\n}, getDomContainer = (id, source) => {\n    let domContainer = source ?? document.getElementById(id);\n    if (domContainer) {\n        return domContainer;\n    }\n    domContainer = document.createElement(\"div\");\n    domContainer.id = id;\n    domContainer.dataset[generatedAttribute] = generatedTrue;\n    document.body.append(domContainer);\n    return domContainer;\n};\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get items() {\n        return this._domArray;\n    }\n    get version() {\n        return \"3.4.0\";\n    }\n    addConfig(config) {\n        const key = config.key ?? config.name ?? \"default\";\n        this._configs.set(key, config);\n        this._eventDispatcher.dispatchEvent(EventType.configAdded, { data: { name: key, config } });\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        executeOnSingleOrMultiple(effect, type => {\n            if (!this.getEffectDrawer(type)) {\n                this.effectDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        if (!this.getPathGenerator(name)) {\n            this.pathGenerators.set(name, generator);\n        }\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        if (override || !this.getPreset(preset)) {\n            this.presets.set(preset, options);\n        }\n        await this.refresh(refresh);\n    }\n    async addShape(drawer, refresh = true) {\n        for (const validType of drawer.validTypes) {\n            if (this.getShapeDrawer(validType)) {\n                continue;\n            }\n            this.shapeDrawers.set(validType, drawer);\n        }\n        await this.refresh(refresh);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this.items;\n    }\n    domItem(index) {\n        return this.item(index);\n    }\n    async getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (plugin.needsPlugin(container.actualOptions)) {\n                res.set(plugin.id, await plugin.getPlugin(container));\n            }\n        }\n        return res;\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    async getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    async getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find(t => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    async getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    item(index) {\n        const { items } = this, item = items[index];\n        if (!item || item.destroyed) {\n            const deleteCount = 1;\n            items.splice(index, deleteCount);\n            return;\n        }\n        return item;\n    }\n    async load(params) {\n        const randomFactor = 10000, id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * randomFactor)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        const currentOptions = itemFromSingleOrMultiple(options, index), { items } = this, oldIndex = items.findIndex(v => v.id.description === id), minIndex = 0, newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= minIndex) {\n            const old = this.item(oldIndex), one = 1, none = 0, deleteCount = old ? one : none;\n            if (old && !old.destroyed) {\n                old.destroy(false);\n            }\n            items.splice(oldIndex, deleteCount, newItem);\n        }\n        else {\n            items.push(newItem);\n        }\n        const domContainer = getDomContainer(id, params.element), canvasEl = getCanvasFromContainer(domContainer);\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        this.plugins.forEach(plugin => plugin.loadOptions?.(options, sourceOptions));\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        updaters.forEach(updater => updater.loadOptions?.(options, ...sourceOptions));\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        await Promise.all(this.items.map(t => t.refresh()));\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const { items } = this;\n        if (!items.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        items.forEach(item => item.addClickHandler(callback));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}