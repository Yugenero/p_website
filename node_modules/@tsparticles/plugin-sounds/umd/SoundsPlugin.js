(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/Sounds.js", "./SoundsInstance.js", "./utils.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SoundsPlugin = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Sounds_js_1 = require("./Options/Classes/Sounds.js");
    const SoundsInstance_js_1 = require("./SoundsInstance.js");
    const utils_js_1 = require("./utils.js");
    const generalFirstClickHandler = () => {
        removeEventListener(engine_1.mouseDownEvent, generalFirstClickHandler);
        removeEventListener(engine_1.touchStartEvent, generalFirstClickHandler);
        (0, utils_js_1.unmuteWindow)();
    };
    class SoundsPlugin {
        constructor(engine) {
            this.id = "sounds";
            this._engine = engine;
            const listenerOptions = {
                capture: true,
                once: true,
            };
            addEventListener(engine_1.mouseDownEvent, generalFirstClickHandler, listenerOptions);
            addEventListener(engine_1.touchStartEvent, generalFirstClickHandler, listenerOptions);
        }
        getPlugin(container) {
            return Promise.resolve(new SoundsInstance_js_1.SoundsInstance(container, this._engine));
        }
        loadOptions(options, source) {
            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
                return;
            }
            let soundsOptions = options.sounds;
            if (soundsOptions?.load === undefined) {
                options.sounds = soundsOptions = new Sounds_js_1.Sounds();
            }
            soundsOptions.load(source?.sounds);
        }
        needsPlugin(options) {
            return options?.sounds?.enable ?? false;
        }
    }
    exports.SoundsPlugin = SoundsPlugin;
});
