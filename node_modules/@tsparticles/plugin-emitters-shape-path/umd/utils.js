(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateRandomPointOnPathPerimeter = exports.generateRandomPointWithinPath = void 0;
    const engine_1 = require("@tsparticles/engine");
    const maxAttempts = 100, half = 0.5;
    function generateRandomPointWithinPath(ctx, path, center, size) {
        let randomPoint = null;
        for (let attempts = 0; attempts < maxAttempts; attempts++) {
            const tmpPoint = {
                x: center.x + (0, engine_1.getRandom)() * size.width - size.width * half,
                y: center.y + (0, engine_1.getRandom)() * size.height - size.height * half,
            };
            if (ctx.isPointInPath(path, tmpPoint.x, tmpPoint.y)) {
                randomPoint = tmpPoint;
                break;
            }
        }
        return randomPoint;
    }
    exports.generateRandomPointWithinPath = generateRandomPointWithinPath;
    function generateRandomPointOnPathPerimeter(ctx, path, center, size) {
        let randomPoint = null;
        for (let attempts = 0; attempts < maxAttempts; attempts++) {
            const tmpPoint = {
                x: center.x + (0, engine_1.getRandom)() * size.width - size.width * half,
                y: center.y + (0, engine_1.getRandom)() * size.height - size.height * half,
            };
            if (ctx.isPointInStroke(path, tmpPoint.x, tmpPoint.y)) {
                randomPoint = tmpPoint;
                break;
            }
        }
        return randomPoint;
    }
    exports.generateRandomPointOnPathPerimeter = generateRandomPointOnPathPerimeter;
});
