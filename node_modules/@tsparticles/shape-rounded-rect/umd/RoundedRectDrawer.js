(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Utils.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RoundedRectDrawer = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Utils_js_1 = require("./Utils.js");
    const fixFactorSquare = 2, fixFactor = Math.sqrt(fixFactorSquare), double = 2, defaultRadius = 5;
    class RoundedRectDrawer {
        constructor() {
            this.validTypes = ["rounded-rect"];
        }
        draw(data) {
            const { context, particle, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double, borderRadius = particle.borderRadius ?? defaultRadius;
            if ("roundRect" in context) {
                context.roundRect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter, borderRadius);
            }
            else {
                (0, Utils_js_1.drawRoundedRect)(context, fixedRadius, fixedDiameter, borderRadius);
            }
        }
        particleInit(container, particle) {
            const shapeData = particle.shapeData;
            particle.borderRadius = (0, engine_1.getRangeValue)(shapeData?.radius ?? defaultRadius) * container.retina.pixelRatio;
        }
    }
    exports.RoundedRectDrawer = RoundedRectDrawer;
});
