{"ast":null,"code":"import React, { memo, useMemo, useRef, useEffect } from \"react\";\nimport Typed from \"typed.js\";\nexport const ReactTyped = memo(_ref => {\n  let {\n    style,\n    className,\n    typedRef,\n    parseRef: transformRef,\n    stopped,\n    children,\n    startWhenVisible,\n    ...typedOptions\n  } = _ref;\n  const rootElement = useRef(null);\n  const shouldUpdateArgs = useMemo(() => {\n    var _typedOptions$strings;\n    return [...Object.values(typedOptions).filter(v => typeof v === \"boolean\" || typeof v === \"number\" || typeof v === \"string\"), (_typedOptions$strings = typedOptions.strings) === null || _typedOptions$strings === void 0 ? void 0 : _typedOptions$strings.join(\",\")];\n  }, [typedOptions]);\n  useEffect(() => {\n    const element = transformRef && transformRef(rootElement) || rootElement.current;\n    const typed = new Typed(element, {\n      ...typedOptions\n    });\n    if (stopped || startWhenVisible) {\n      typed === null || typed === void 0 || typed.stop();\n    }\n    if (startWhenVisible) {\n      const observer = new IntersectionObserver(_ref2 => {\n        let [entry] = _ref2;\n        if (entry.isIntersecting) {\n          typed === null || typed === void 0 || typed.start();\n          observer.disconnect();\n        }\n      });\n      observer.observe(element);\n    }\n    if (typedRef && typed) {\n      typedRef(typed);\n    }\n    return () => {\n      typed.destroy();\n    };\n  }, shouldUpdateArgs);\n  const child = !children ? React.createElement(\"span\", {\n    style: style,\n    ref: rootElement\n  }) : React.cloneElement(children, {\n    ref: rootElement\n  });\n  return React.createElement(\"span\", {\n    style: style,\n    className: className,\n    \"data-testid\": \"react-typed\"\n  }, child);\n});\nexport { Typed };","map":{"version":3,"names":["React","memo","useMemo","useRef","useEffect","Typed","ReactTyped","_ref","style","className","typedRef","parseRef","transformRef","stopped","children","startWhenVisible","typedOptions","rootElement","shouldUpdateArgs","_typedOptions$strings","Object","values","filter","v","strings","join","element","current","typed","stop","observer","IntersectionObserver","_ref2","entry","isIntersecting","start","disconnect","observe","destroy","child","createElement","ref","cloneElement"],"sources":["/Users/nero/Desktop/local_workspace/p_website/node_modules/react-typed/src/index.tsx"],"sourcesContent":["import React, { memo, useMemo, useRef, useEffect } from \"react\";\nimport Typed from \"typed.js\";\nexport interface ReactTypedProps {\n  stopped?: boolean;\n  /**\n   * if true will be initialized in stopped state\n   * @default false\n   * */\n  startWhenVisible?: boolean;\n  /**\n   * Styles for the created element in case children is not provided\n   * */\n  style?: React.CSSProperties;\n  /**\n   * class name for the created element in case children is not provided\n   * */\n  className?: string;\n  /**\n   * In some custom component dom element is not in the ref.current property.\n   * ie an Input by antd the element is in input property ( ref.current.input )\n   * you can use this function to get the element from the ref\n   * @default (ref)=>ref.current\n   * */\n  parseRef?: (ref: React.RefObject<any>) => HTMLElement;\n  /**\n   * Returns the typed instance\n   * */\n  typedRef?: (typed: Typed) => void;\n  /**\n   * strings to be typed\n   * @default [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ]\n   * */\n  children?: React.ReactElement;\n  strings?: string[];\n  /**\n   * ID or instance of HTML element of element containing string children\n   * @default null\n   */\n  stringsElement?: string | Element;\n  /**\n   * type speed in milliseconds\n   * @default 0\n   */\n  typeSpeed?: number;\n  /**\n   * time before typing starts in milliseconds\n   * @default 0\n   */\n  startDelay?: number;\n  /**\n   * backspacing speed in milliseconds\n   * @default 0\n   */\n  backSpeed?: number;\n  /**\n   * only backspace what doesn't match the previous string\n   * @default true\n   */\n  smartBackspace?: boolean;\n  /**\n   * shuffle the strings\n   * @default true\n   */\n  shuffle?: boolean;\n  /**\n   * time before backspacing in milliseconds\n   * @default 700\n   */\n  backDelay?: number;\n  /**\n   * Fade out instead of backspace\n   * @default false\n   */\n  fadeOut?: boolean;\n  /**\n   * css class for fade animation\n   * @default typed-fade-out\n   */\n  fadeOutClass?: string;\n  /**\n   * Fade out delay in milliseconds\n   * @default 500\n   */\n  fadeOutDelay?: number;\n  /**\n   * loop strings\n   * @default false\n   */\n  loop?: boolean;\n  /**\n   * amount of loops\n   * @default Infinity\n   */\n  loopCount?: number;\n  /**\n   * show cursor\n   * @default true\n   */\n  showCursor?: boolean;\n  /**\n   * character for cursor\n   * @default |\n   */\n  cursorChar?: string;\n  /**\n   * insert CSS for cursor and fadeOut into HTML\n   * @default true\n   */\n  autoInsertCss?: boolean;\n  /**\n   * attribute for typing Ex: input placeholder, value, or just HTML text\n   * @default null\n   */\n  attr?: string;\n  /**\n   * bind to focus and blur if el is text input\n   * @default false\n   */\n  bindInputFocusEvents?: boolean;\n  /**\n   * 'html' or 'null' for plaintext\n   * @default html\n   */\n  contentType?: string;\n  /**\n   * Before it begins typing the first string\n   */\n  onBegin?: (self: Typed) => number;\n  /**\n   * All typing is complete\n   */\n  onComplete?(self: Typed): void;\n  /**\n   * Before each string is typed\n   */\n  preStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * After each string is typed\n   */\n  onStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * During looping, after last string is typed\n   */\n  onLastStringBackspaced?(self: Typed): void;\n  /**\n   * Typing has been stopped\n   */\n  onTypingPaused?(arrayPos: number, self: Typed): void;\n  /**\n   * Typing has been started after being stopped\n   */\n  onTypingResumed?(arrayPos: number, self: Typed): void;\n  /**\n   * After reset\n   */\n  onReset?(self: Typed): void;\n  /**\n   * After stop\n   */\n  onStop?(arrayPos: number, self: Typed): void;\n  /**\n   * After start\n   */\n  onStart?(arrayPos: number, self: Typed): void;\n  /**\n   * After destroy\n   */\n  onDestroy?(self: Typed): void;\n}\n\nexport const ReactTyped: React.FC<ReactTypedProps> = memo(\n  ({\n    style,\n    className,\n    typedRef,\n    parseRef,\n    stopped,\n    children,\n    startWhenVisible,\n    ...typedOptions\n  }) => {\n    const rootElement = useRef<any>(null);\n    const shouldUpdateArgs = useMemo(\n      () => [\n        ...Object.values(typedOptions).filter(\n          (v) =>\n            typeof v === \"boolean\" ||\n            typeof v === \"number\" ||\n            typeof v === \"string\"\n        ),\n        typedOptions.strings?.join(\",\"),\n      ],\n      [typedOptions]\n    );\n    useEffect(() => {\n      const element =\n        (parseRef && parseRef(rootElement)) || rootElement.current;\n      const typed = new Typed(element, { ...typedOptions });\n\n      if (stopped || startWhenVisible) {\n        typed?.stop();\n      }\n\n      if (startWhenVisible) {\n        const observer = new IntersectionObserver(([entry]) => {\n          if (entry.isIntersecting) {\n            typed?.start();\n            observer.disconnect();\n          }\n        });\n        observer.observe(element);\n      }\n\n      if (typedRef && typed) {\n        typedRef(typed);\n      }\n      return () => {\n        typed.destroy();\n      };\n    }, shouldUpdateArgs);\n\n    const child = !children ? (\n      <span style={style} className={className} ref={rootElement} />\n    ) : (\n      React.cloneElement(children, {\n        ref: rootElement,\n      })\n    );\n    return child;\n  }\n);\n\nexport { Typed };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,UAAU;AAkL5B,OAAO,MAAMC,UAAU,GAA8BL,IAAI,CACvDM,IAAA,IASK;EAAA,IATJ;IACCC,KAAK;IACLC,SAAS;IACTC,QAAQ;IACRC,QAAQ,EAAEC,YAAY;IACtBC,OAAO;IACPC,QAAQ;IACRC,gBAAgB;IAChB,GAAGC;EAAY,CAChB,GAAAT,IAAA;EACC,MAAMU,WAAW,GAAGd,MAAM,CAAM,IAAI,CAAC;EACrC,MAAMe,gBAAgB,GAAGhB,OAAO,CAC9B;IAAA,IAAAiB,qBAAA;IAAA,OAAM,CACJ,GAAGC,MAAM,CAACC,MAAM,CAACL,YAAY,CAAC,CAACM,MAAM,CAClCC,CAAC,IACA,OAAOA,CAAC,KAAK,SAAS,IACtB,OAAOA,CAAC,KAAK,QAAQ,IACrB,OAAOA,CAAC,KAAK,QAAQ,CACxB,GAAAJ,qBAAA,GACDH,YAAY,CAACQ,OAAO,cAAAL,qBAAA,uBAApBA,qBAAA,CAAsBM,IAAI,CAAC,GAAG,CAAC,CAChC;EAAA,GACD,CAACT,YAAY,CAAC,CACf;EACDZ,SAAS,CAAC,MAAK;IACb,MAAMsB,OAAO,GACVd,YAAY,IAAIA,YAAY,CAACK,WAAW,CAAC,IAAKA,WAAW,CAACU,OAAO;IACpE,MAAMC,KAAK,GAAG,IAAIvB,KAAK,CAACqB,OAAO,EAAE;MAAE,GAAGV;IAAY,CAAE,CAAC;IAErD,IAAIH,OAAO,IAAIE,gBAAgB,EAAE;MAC/Ba,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEC,IAAI,EAAE;IACf;IAEA,IAAId,gBAAgB,EAAE;MACpB,MAAMe,QAAQ,GAAG,IAAIC,oBAAoB,CAACC,KAAA,IAAY;QAAA,IAAX,CAACC,KAAK,CAAC,GAAAD,KAAA;QAChD,IAAIC,KAAK,CAACC,cAAc,EAAE;UACxBN,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEO,KAAK,EAAE;UACdL,QAAQ,CAACM,UAAU,EAAE;QACvB;MACF,CAAC,CAAC;MACFN,QAAQ,CAACO,OAAO,CAACX,OAAO,CAAC;IAC3B;IAEA,IAAIhB,QAAQ,IAAIkB,KAAK,EAAE;MACrBlB,QAAQ,CAACkB,KAAK,CAAC;IACjB;IACA,OAAO,MAAK;MACVA,KAAK,CAACU,OAAO,EAAE;IACjB,CAAC;EACH,CAAC,EAAEpB,gBAAgB,CAAC;EAEpB,MAAMqB,KAAK,GAAG,CAACzB,QAAQ,GACrBd,KAAA,CAAAwC,aAAA;IAAMhC,KAAK,EAAEA,KAAK;IAAEiC,GAAG,EAAExB;EAAW,EAAI,GAExCjB,KAAK,CAAC0C,YAAY,CAAC5B,QAAQ,EAAE;IAC3B2B,GAAG,EAAExB;GACN,CACF;EACD,OACEjB,KAAA,CAAAwC,aAAA;IAAMhC,KAAK,EAAEA,KAAK;IAAEC,SAAS,EAAEA,SAAS;IAAA,eAAc;EAAa,GAChE8B,KAAK,CACD;AAEX,CAAC,CACF;AAED,SAASlC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}