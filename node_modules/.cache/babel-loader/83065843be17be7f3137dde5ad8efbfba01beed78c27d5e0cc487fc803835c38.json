{"ast":null,"code":"var _jsxFileName = \"/Users/nero/Desktop/local_workspace/p_website/src/components/particles/particlesComponent.js\",\n  _s = $RefreshSig$();\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\nimport './particles.css';\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticlesComponent = props => {\n  _s();\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async engine => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const particlesLoaded = container => {\n    console.log(container);\n  };\n  const options = useMemo(() => ({\n    background: {\n      zIndex: 1000\n    },\n    fpsLimit: 144,\n    interactivity: {\n      events: {\n        onClick: {\n          enable: true,\n          mode: \"repulse\"\n        },\n        onHover: {\n          enable: true,\n          mode: 'grab'\n        }\n      },\n      modes: {\n        push: {\n          distance: 200,\n          duration: 15\n        },\n        grab: {\n          distance: 150\n        }\n      }\n    },\n    particles: {\n      color: {\n        value: \"#323232\"\n      },\n      links: {\n        color: \"#FFFFFF\",\n        distance: 150,\n        enable: true,\n        opacity: 0.3,\n        width: 1\n      },\n      move: {\n        direction: \"none\",\n        enable: true,\n        outModes: {\n          default: \"bounce\"\n        },\n        random: true,\n        speed: 1,\n        straight: false\n      },\n      number: {\n        density: {\n          enable: true\n        },\n        value: 150\n      },\n      opacity: {\n        value: 0\n      },\n      shape: {\n        type: \"circle\"\n      },\n      size: {\n        value: {\n          min: 1,\n          max: 3\n        }\n      }\n    },\n    detectRetina: true\n  }), []);\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    id: props.id,\n    init: particlesLoaded,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticlesComponent, \"eB+NWpxmGZSqHQDaTSx/Qv0E/5M=\");\n_c = ParticlesComponent;\nexport default ParticlesComponent;\nvar _c;\n$RefreshReg$(_c, \"ParticlesComponent\");","map":{"version":3,"names":["Particles","initParticlesEngine","useEffect","useMemo","useState","loadSlim","jsxDEV","_jsxDEV","ParticlesComponent","props","_s","init","setInit","engine","then","particlesLoaded","container","console","log","options","background","zIndex","fpsLimit","interactivity","events","onClick","enable","mode","onHover","modes","push","distance","duration","grab","particles","color","value","links","opacity","width","move","direction","outModes","default","random","speed","straight","number","density","shape","type","size","min","max","detectRetina","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nero/Desktop/local_workspace/p_website/src/components/particles/particlesComponent.js"],"sourcesContent":["import Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\nimport './particles.css';\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\n\n\nconst ParticlesComponent = (props) => {\n\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n\n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n\n  const options = useMemo(\n    () => ({\n      background: {\n\t\tzIndex: 1000,\n      },\n      fpsLimit: 144,\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            mode: \"repulse\",\n          },\n          onHover: {\n            enable: true,\n            mode: 'grab',\n          },\n        },\n        modes: {\n          push: {\n            distance: 200,\n            duration: 15,\n          },\n          grab: {\n            distance: 150,\n          },\n        },\n      },\n      particles: {\n        color: {\n          value: \"#323232\",\n        },\n        links: {\n          color: \"#FFFFFF\",\n          distance: 150,\n          enable: true,\n          opacity: 0.3,\n          width: 1,\n        },\n        move: {\n          direction: \"none\",\n          enable: true,\n          outModes: {\n            default: \"bounce\",\n          },\n          random: true,\n          speed: 1,\n          straight: false,\n        },\n        number: {\n          density: {\n            enable: true,\n          },\n          value: 150,\n        },\n        opacity: {\n          value: 0,\n        },\n        shape: {\n          type: \"circle\",\n        },\n        size: {\n          value: { min: 1, max: 3 },\n        },\n      },\n      detectRetina: true,\n    }),\n    [],\n  );\n\n\n  return <Particles id={props.id} init={particlesLoaded} options={options} />; \n};\n\nexport default ParticlesComponent;\n"],"mappings":";;AAAA,OAAOA,SAAS,IAAIC,mBAAmB,QAAQ,oBAAoB;AACnE,SAASC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD;AACA;AACA,SAASC,QAAQ,QAAQ,mBAAmB,CAAC,CAAC;AAC9C,OAAO,iBAAiB;AACxB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAEpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACvC;EACAF,SAAS,CAAC,MAAM;IACdD,mBAAmB,CAAC,MAAOY,MAAM,IAAK;MACpC;MACA;MACA;MACA;MACA;MACA,MAAMR,QAAQ,CAACQ,MAAM,CAAC;MACtB;IACF,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACZF,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAIC,SAAS,IAAK;IACrCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EACxB,CAAC;EAGD,MAAMG,OAAO,GAAGhB,OAAO,CACrB,OAAO;IACLiB,UAAU,EAAE;MAChBC,MAAM,EAAE;IACJ,CAAC;IACDC,QAAQ,EAAE,GAAG;IACbC,aAAa,EAAE;MACbC,MAAM,EAAE;QACNC,OAAO,EAAE;UACPC,MAAM,EAAE,IAAI;UACZC,IAAI,EAAE;QACR,CAAC;QACDC,OAAO,EAAE;UACPF,MAAM,EAAE,IAAI;UACZC,IAAI,EAAE;QACR;MACF,CAAC;MACDE,KAAK,EAAE;QACLC,IAAI,EAAE;UACJC,QAAQ,EAAE,GAAG;UACbC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAE;UACJF,QAAQ,EAAE;QACZ;MACF;IACF,CAAC;IACDG,SAAS,EAAE;MACTC,KAAK,EAAE;QACLC,KAAK,EAAE;MACT,CAAC;MACDC,KAAK,EAAE;QACLF,KAAK,EAAE,SAAS;QAChBJ,QAAQ,EAAE,GAAG;QACbL,MAAM,EAAE,IAAI;QACZY,OAAO,EAAE,GAAG;QACZC,KAAK,EAAE;MACT,CAAC;MACDC,IAAI,EAAE;QACJC,SAAS,EAAE,MAAM;QACjBf,MAAM,EAAE,IAAI;QACZgB,QAAQ,EAAE;UACRC,OAAO,EAAE;QACX,CAAC;QACDC,MAAM,EAAE,IAAI;QACZC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE;MACZ,CAAC;MACDC,MAAM,EAAE;QACNC,OAAO,EAAE;UACPtB,MAAM,EAAE;QACV,CAAC;QACDU,KAAK,EAAE;MACT,CAAC;MACDE,OAAO,EAAE;QACPF,KAAK,EAAE;MACT,CAAC;MACDa,KAAK,EAAE;QACLC,IAAI,EAAE;MACR,CAAC;MACDC,IAAI,EAAE;QACJf,KAAK,EAAE;UAAEgB,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAE;MAC1B;IACF,CAAC;IACDC,YAAY,EAAE;EAChB,CAAC,CAAC,EACF,EACF,CAAC;EAGD,oBAAO/C,OAAA,CAACP,SAAS;IAACuD,EAAE,EAAE9C,KAAK,CAAC8C,EAAG;IAAC5C,IAAI,EAAEI,eAAgB;IAACI,OAAO,EAAEA;EAAQ;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7E,CAAC;AAACjD,EAAA,CA9FIF,kBAAkB;AAAAoD,EAAA,GAAlBpD,kBAAkB;AAgGxB,eAAeA,kBAAkB;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}