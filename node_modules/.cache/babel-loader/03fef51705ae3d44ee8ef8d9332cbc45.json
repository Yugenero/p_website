{"ast":null,"code":"import _slicedToArray from \"/Users/nero/Desktop/Local_workspace/personal_website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nvar area = 48;\nexport var Burger = function Burger(_ref) {\n  var _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n    _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? 'left' : _ref$direction,\n    _ref$distance = _ref.distance,\n    distance = _ref$distance === void 0 ? 'md' : _ref$distance,\n    _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? 0.4 : _ref$duration,\n    _ref$easing = _ref.easing,\n    easing = _ref$easing === void 0 ? 'cubic-bezier(0, 0, 0, 1)' : _ref$easing,\n    _ref$hideOutline = _ref.hideOutline,\n    hideOutline = _ref$hideOutline === void 0 ? true : _ref$hideOutline,\n    label = _ref.label,\n    _ref$lines = _ref.lines,\n    lines = _ref$lines === void 0 ? 3 : _ref$lines,\n    onToggle = _ref.onToggle,\n    render = _ref.render,\n    _ref$rounded = _ref.rounded,\n    rounded = _ref$rounded === void 0 ? false : _ref$rounded,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 32 : _ref$size,\n    toggle = _ref.toggle,\n    toggled = _ref.toggled;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    toggledInternal = _useState2[0],\n    toggleInternal = _useState2[1];\n  var width = Math.max(12, Math.min(area, size));\n  var room = Math.round((area - width) / 2);\n  var barHeightRaw = width / 12;\n  var barHeight = Math.round(barHeightRaw);\n  var space = distance === 'lg' ? 0.25 : distance === 'sm' ? 0.75 : 0.5;\n  var marginRaw = width / (lines * (space + (lines === 3 ? 1 : 1.25)));\n  var margin = Math.round(marginRaw);\n  var height = barHeight * lines + margin * (lines - 1);\n  var topOffset = Math.round((area - height) / 2);\n  var translate = lines === 3 ? distance === 'lg' ? 4.0425 : distance === 'sm' ? 5.1625 : 4.6325 : distance === 'lg' ? 6.7875 : distance === 'sm' ? 8.4875 : 7.6675;\n  var deviation = (barHeightRaw - barHeight + (marginRaw - margin)) / (lines === 3 ? 1 : 2);\n  var move = parseFloat((width / translate - deviation / (4 / 3)).toFixed(2));\n  var time = Math.max(0, duration);\n  var burgerStyles = {\n    cursor: 'pointer',\n    height: \"\".concat(area, \"px\"),\n    position: 'relative',\n    transition: \"\".concat(time, \"s \").concat(easing),\n    userSelect: 'none',\n    width: \"\".concat(area, \"px\")\n  };\n  var barStyles = {\n    background: color,\n    height: \"\".concat(barHeight, \"px\"),\n    left: \"\".concat(room, \"px\"),\n    position: 'absolute'\n  };\n  if (hideOutline) {\n    burgerStyles['outline'] = 'none';\n  }\n  if (rounded) {\n    barStyles['borderRadius'] = '9em';\n  }\n  var toggleFunction = toggle || toggleInternal;\n  var isToggled = toggled !== undefined ? toggled : toggledInternal;\n  var handler = function handler() {\n    toggleFunction(!isToggled);\n    if (typeof onToggle === 'function') onToggle(!isToggled);\n  };\n  return render({\n    barHeight: barHeight,\n    barStyles: barStyles,\n    burgerStyles: burgerStyles,\n    easing: easing,\n    handler: handler,\n    isLeft: direction === 'left',\n    isToggled: isToggled,\n    label: label,\n    margin: margin,\n    move: move,\n    time: time,\n    topOffset: topOffset,\n    width: width\n  });\n};","map":null,"metadata":{},"sourceType":"module"}