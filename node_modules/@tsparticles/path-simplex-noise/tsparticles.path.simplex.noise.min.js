/*! For license information please see tsparticles.path.simplex.noise.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"),require("@tsparticles/simplex-noise"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine","@tsparticles/simplex-noise"],t);else{var i="object"==typeof exports?t(require("@tsparticles/engine"),require("@tsparticles/simplex-noise")):t(e.window,e.window);for(var s in i)("object"==typeof exports?exports:e)[s]=i[s]}}(this,((e,t)=>(()=>{var i={303:t=>{t.exports=e},226:e=>{e.exports=t}},s={};function o(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e](n,n.exports,o),n.exports}o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{o.r(n),o.d(n,{loadSimplexNoisePath:()=>h,simplexNoisePathName:()=>r});var e=o(303),t=o(226);const i={size:20,increment:.004,columns:0,rows:0,layers:0,width:0,height:0,offset:{x:4e4,y:4e4,z:4e4}};class s{constructor(){const s=new t.SimplexNoise;this._simplex=s.noise4d,this.field=[],this.noiseW=0,this.options=(0,e.deepExtend)({},i)}generate(t){const i=t.getPosition(),s=Math.max(Math.floor(i.x/this.options.size),0),o=Math.max(Math.floor(i.y/this.options.size),0),n=Math.max(Math.floor(i.z/this.options.size),0),r=e.Vector.origin;return this.field?.[s]?.[o]?.[n]?(r.setTo(this.field[s][o][n]),r):r}init(e){this.container=e,this._setup()}reset(){}update(){this.container&&(this._calculateField(),this.noiseW+=this.options.increment)}_calculateField(){const e=this.options;for(let t=0;t<e.columns;t++)for(let i=0;i<e.rows;i++)for(let s=0;s<e.layers;s++)this.field[t][i][s].angle=this._simplex.noise(t/50,i/50,s/50,this.noiseW)*Math.PI*2,this.field[t][i][s].length=this._simplex.noise(t/100+e.offset.x,i/100+e.offset.y,s/100+e.offset.z,this.noiseW)}_initField(){this.field=new Array(this.options.columns);for(let t=0;t<this.options.columns;t++){this.field[t]=new Array(this.options.rows);for(let i=0;i<this.options.rows;i++){this.field[t][i]=new Array(this.options.layers);for(let s=0;s<this.options.layers;s++)this.field[t][i][s]=e.Vector.origin}}}_resetField(){const t=this.container;if(!t)return;const s=t.actualOptions.particles.move.path.options;this.options.size=s.size>0?s.size:i.size,this.options.increment=s.increment>0?s.increment:i.increment,this.options.width=t.canvas.size.width,this.options.height=t.canvas.size.height;const o=s.offset;this.options.offset.x=o?.x??i.offset.x,this.options.offset.y=o?.y??i.offset.y,this.options.offset.z=o?.z??i.offset.z,this.options.seed=s.seed??i.seed,this._simplex.seed(this.options.seed??(0,e.getRandom)()),this.options.columns=Math.floor(this.options.width/this.options.size)+1,this.options.rows=Math.floor(this.options.height/this.options.size)+1,this.options.layers=Math.floor(t.zLayers/this.options.size)+1,this._initField()}_setup(){this.noiseW=0,this._resetField(),addEventListener("resize",(()=>this._resetField()))}}const r="simplexNoise";async function h(e,t=!0){await e.addPathGenerator(r,new s,t)}})(),n})()));