{"ast":null,"code":"import Particles,{initParticlesEngine}from\"@tsparticles/react\";import{useEffect,useMemo,useState}from\"react\";// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport{loadSlim}from\"@tsparticles/slim\";// if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\nimport'./particles.css';// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ParticlesComponent=props=>{const[init,setInit]=useState(false);// this should be run only once per application lifetime\nuseEffect(()=>{initParticlesEngine(async engine=>{// you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n// this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n// starting from v2 you can add only the features you need reducing the bundle size\n//await loadAll(engine);\n//await loadFull(engine);\nawait loadSlim(engine);//await loadBasic(engine);\n}).then(()=>{setInit(true);});},[]);const particlesLoaded=container=>{console.log(container);};const options=useMemo(()=>({background:{zIndex:1000},fpsLimit:144,interactivity:{events:{onClick:{enable:true,mode:\"repulse\"},onHover:{enable:true,mode:'grab'}},modes:{push:{distance:200,duration:15},grab:{distance:100}}},particles:{color:{value:\"#323232\"},links:{color:\"#555555\",distance:150,enable:true,opacity:0.5,width:1},move:{direction:\"none\",enable:true,outModes:{default:\"bounce\"},random:true,speed:1,straight:false},number:{density:{enable:true},value:150},opacity:{value:0},shape:{type:\"circle\"},size:{value:{min:1,max:3}}},detectRetina:true}),[]);return/*#__PURE__*/_jsx(Particles,{id:props.id,init:particlesLoaded,options:options});};export default ParticlesComponent;","map":{"version":3,"names":["Particles","initParticlesEngine","useEffect","useMemo","useState","loadSlim","jsx","_jsx","ParticlesComponent","props","init","setInit","engine","then","particlesLoaded","container","console","log","options","background","zIndex","fpsLimit","interactivity","events","onClick","enable","mode","onHover","modes","push","distance","duration","grab","particles","color","value","links","opacity","width","move","direction","outModes","default","random","speed","straight","number","density","shape","type","size","min","max","detectRetina","id"],"sources":["/Users/nero/Desktop/local_workspace/p_website/src/components/particles/particlesComponent.js"],"sourcesContent":["import Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\nimport './particles.css';\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\n\n\nconst ParticlesComponent = (props) => {\n\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n\n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n\n  const options = useMemo(\n    () => ({\n      background: {\n\t\tzIndex: 1000,\n      },\n      fpsLimit: 144,\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            mode: \"repulse\",\n          },\n          onHover: {\n            enable: true,\n            mode: 'grab',\n          },\n        },\n        modes: {\n          push: {\n            distance: 200,\n            duration: 15,\n          },\n          grab: {\n            distance: 100,\n          },\n        },\n      },\n      particles: {\n        color: {\n          value: \"#323232\",\n        },\n        links: {\n          color: \"#555555\",\n          distance: 150,\n          enable: true,\n          opacity: 0.5,\n          width: 1,\n        },\n        move: {\n          direction: \"none\",\n          enable: true,\n          outModes: {\n            default: \"bounce\",\n          },\n          random: true,\n          speed: 1,\n          straight: false,\n        },\n        number: {\n          density: {\n            enable: true,\n          },\n          value: 150,\n        },\n        opacity: {\n          value: 0,\n        },\n        shape: {\n          type: \"circle\",\n        },\n        size: {\n          value: { min: 1, max: 3 },\n        },\n      },\n      detectRetina: true,\n    }),\n    [],\n  );\n\n\n  return <Particles id={props.id} init={particlesLoaded} options={options} />; \n};\n\nexport default ParticlesComponent;\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,EAAIC,mBAAmB,KAAQ,oBAAoB,CACnE,OAASC,SAAS,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CACpD;AACA;AACA,OAASC,QAAQ,KAAQ,mBAAmB,CAAE;AAC9C,MAAO,iBAAiB,CACxB;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAIA,KAAM,CAAAC,kBAAkB,CAAIC,KAAK,EAAK,CAEpC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CACvC;AACAF,SAAS,CAAC,IAAM,CACdD,mBAAmB,CAAC,KAAO,CAAAW,MAAM,EAAK,CACpC;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAP,QAAQ,CAACO,MAAM,CAAC,CACtB;AACF,CAAC,CAAC,CAACC,IAAI,CAAC,IAAM,CACZF,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,eAAe,CAAIC,SAAS,EAAK,CACrCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC,CACxB,CAAC,CAGD,KAAM,CAAAG,OAAO,CAAGf,OAAO,CACrB,KAAO,CACLgB,UAAU,CAAE,CAChBC,MAAM,CAAE,IACJ,CAAC,CACDC,QAAQ,CAAE,GAAG,CACbC,aAAa,CAAE,CACbC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPC,MAAM,CAAE,IAAI,CACZC,IAAI,CAAE,SACR,CAAC,CACDC,OAAO,CAAE,CACPF,MAAM,CAAE,IAAI,CACZC,IAAI,CAAE,MACR,CACF,CAAC,CACDE,KAAK,CAAE,CACLC,IAAI,CAAE,CACJC,QAAQ,CAAE,GAAG,CACbC,QAAQ,CAAE,EACZ,CAAC,CACDC,IAAI,CAAE,CACJF,QAAQ,CAAE,GACZ,CACF,CACF,CAAC,CACDG,SAAS,CAAE,CACTC,KAAK,CAAE,CACLC,KAAK,CAAE,SACT,CAAC,CACDC,KAAK,CAAE,CACLF,KAAK,CAAE,SAAS,CAChBJ,QAAQ,CAAE,GAAG,CACbL,MAAM,CAAE,IAAI,CACZY,OAAO,CAAE,GAAG,CACZC,KAAK,CAAE,CACT,CAAC,CACDC,IAAI,CAAE,CACJC,SAAS,CAAE,MAAM,CACjBf,MAAM,CAAE,IAAI,CACZgB,QAAQ,CAAE,CACRC,OAAO,CAAE,QACX,CAAC,CACDC,MAAM,CAAE,IAAI,CACZC,KAAK,CAAE,CAAC,CACRC,QAAQ,CAAE,KACZ,CAAC,CACDC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPtB,MAAM,CAAE,IACV,CAAC,CACDU,KAAK,CAAE,GACT,CAAC,CACDE,OAAO,CAAE,CACPF,KAAK,CAAE,CACT,CAAC,CACDa,KAAK,CAAE,CACLC,IAAI,CAAE,QACR,CAAC,CACDC,IAAI,CAAE,CACJf,KAAK,CAAE,CAAEgB,GAAG,CAAE,CAAC,CAAEC,GAAG,CAAE,CAAE,CAC1B,CACF,CAAC,CACDC,YAAY,CAAE,IAChB,CAAC,CAAC,CACF,EACF,CAAC,CAGD,mBAAO9C,IAAA,CAACP,SAAS,EAACsD,EAAE,CAAE7C,KAAK,CAAC6C,EAAG,CAAC5C,IAAI,CAAEI,eAAgB,CAACI,OAAO,CAAEA,OAAQ,CAAE,CAAC,CAC7E,CAAC,CAED,cAAe,CAAAV,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}