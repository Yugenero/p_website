{"ast":null,"code":"import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { MoveDirection } from \"../Enums/Directions/MoveDirection.js\";\nimport { OutMode } from \"../Enums/Modes/OutMode.js\";\nimport { ParticleOutType } from \"../Enums/Types/ParticleOutType.js\";\nimport { PixelMode } from \"../Enums/Modes/PixelMode.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0,\n  double = 2,\n  half = 0.5,\n  squareExp = 2,\n  randomString = \"random\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n  const effectData = effectOptions.options[effect];\n  if (!effectData) {\n    return;\n  }\n  return deepExtend({\n    close: effectOptions.close,\n    fill: effectOptions.fill\n  }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n  const shapeData = shapeOptions.options[shape];\n  if (!shapeData) {\n    return;\n  }\n  return deepExtend({\n    close: shapeOptions.close,\n    fill: shapeOptions.fill\n  }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  const diameter = data.radius * double;\n  if (data.coord > data.maxCoord - diameter) {\n    data.setCb(-data.radius);\n  } else if (data.coord < diameter) {\n    data.setCb(data.radius);\n  }\n}\nexport class Particle {\n  constructor(engine, container) {\n    var _this = this;\n    this.container = container;\n    this._calcPosition = function (container, position, zIndex) {\n      var _outModes$left, _outModes$right, _outModes$top, _outModes$bottom;\n      let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultRetryCount;\n      for (const [, plugin] of container.plugins) {\n        const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, _this) : undefined;\n        if (pluginPos) {\n          return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n        }\n      }\n      const canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = _this.getRadius(),\n        outModes = _this.options.move.outModes,\n        fixHorizontal = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [OutMode.bounce],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: value => pos.x += value,\n            radius\n          });\n        },\n        fixVertical = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [OutMode.bounce],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: value => pos.y += value,\n            radius\n          });\n        };\n      fixHorizontal((_outModes$left = outModes.left) !== null && _outModes$left !== void 0 ? _outModes$left : outModes.default);\n      fixHorizontal((_outModes$right = outModes.right) !== null && _outModes$right !== void 0 ? _outModes$right : outModes.default);\n      fixVertical((_outModes$top = outModes.top) !== null && _outModes$top !== void 0 ? _outModes$top : outModes.default);\n      fixVertical((_outModes$bottom = outModes.bottom) !== null && _outModes$bottom !== void 0 ? _outModes$bottom : outModes.default);\n      if (_this._checkOverlap(pos, tryCount)) {\n        const increment = 1;\n        return _this._calcPosition(container, undefined, zIndex, tryCount + increment);\n      }\n      return pos;\n    };\n    this._calculateVelocity = () => {\n      const baseVelocity = getParticleBaseVelocity(this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = this.options.move;\n      if (moveOptions.direction === MoveDirection.inside || moveOptions.direction === MoveDirection.outside) {\n        return res;\n      }\n      const rad = degToRad(getRangeValue(moveOptions.angle.value)),\n        radOffset = degToRad(getRangeValue(moveOptions.angle.offset)),\n        range = {\n          left: radOffset - rad * half,\n          right: radOffset + rad * half\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    };\n    this._checkOverlap = function (pos) {\n      let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRetryCount;\n      const collisionsOptions = _this.options.collisions,\n        radius = _this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      const overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      const retries = overlapOptions.retries,\n        minRetries = 0;\n      if (retries >= minRetries && tryCount > retries) {\n        throw new Error(\"\".concat(errorPrefix, \" particle is overlapping and can't be placed\"));\n      }\n      return !!_this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n    };\n    this._getRollColor = color => {\n      var _this$roll$angle;\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n      const rollFactor = 1,\n        none = 0,\n        backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor,\n        backSum = this.roll.horizontal ? Math.PI * half : none,\n        rolled = Math.floor((((_this$roll$angle = this.roll.angle) !== null && _this$roll$angle !== void 0 ? _this$roll$angle : none) + backSum) / (Math.PI / backFactor)) % double;\n      if (!rolled) {\n        return color;\n      }\n      if (this.backColor) {\n        return this.backColor;\n      }\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n      return color;\n    };\n    this._initPosition = position => {\n      var _this$options$move$ce, _this$options$move$ce2;\n      const container = this.container,\n        zIndexValue = getRangeValue(this.options.zIndex.value),\n        minZ = 0;\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n      this.initialPosition = this.position.copy();\n      const canvasSize = container.canvas.size,\n        defaultRadius = 0;\n      this.moveCenter = {\n        ...getPosition(this.options.move.center, canvasSize),\n        radius: (_this$options$move$ce = this.options.move.center.radius) !== null && _this$options$move$ce !== void 0 ? _this$options$move$ce : defaultRadius,\n        mode: (_this$options$move$ce2 = this.options.move.center.mode) !== null && _this$options$move$ce2 !== void 0 ? _this$options$move$ce2 : PixelMode.percent\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case MoveDirection.inside:\n          this.outType = ParticleOutType.inside;\n          break;\n        case MoveDirection.outside:\n          this.outType = ParticleOutType.outside;\n          break;\n      }\n      this.offset = Vector.origin;\n    };\n    this._engine = engine;\n  }\n  destroy(override) {\n    var _shapeDrawer$particle;\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    const container = this.container,\n      pathGenerator = this.pathGenerator,\n      shapeDrawer = container.shapeDrawers.get(this.shape);\n    shapeDrawer === null || shapeDrawer === void 0 || (_shapeDrawer$particle = shapeDrawer.particleDestroy) === null || _shapeDrawer$particle === void 0 || _shapeDrawer$particle.call(shapeDrawer, this);\n    for (const [, plugin] of container.plugins) {\n      var _plugin$particleDestr;\n      (_plugin$particleDestr = plugin.particleDestroyed) === null || _plugin$particleDestr === void 0 || _plugin$particleDestr.call(plugin, this, override);\n    }\n    for (const updater of container.particles.updaters) {\n      var _updater$particleDest;\n      (_updater$particleDest = updater.particleDestroyed) === null || _updater$particleDest === void 0 || _updater$particleDest.call(updater, this, override);\n    }\n    pathGenerator === null || pathGenerator === void 0 || pathGenerator.reset(this);\n    this._engine.dispatchEvent(EventType.particleDestroyed, {\n      container: this.container,\n      data: {\n        particle: this\n      }\n    });\n  }\n  draw(delta) {\n    const container = this.container,\n      canvas = container.canvas;\n    for (const [, plugin] of container.plugins) {\n      canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    var _this$bubble$color;\n    return this._getRollColor((_this$bubble$color = this.bubble.color) !== null && _this$bubble$color !== void 0 ? _this$bubble$color : getHslFromAnimation(this.color));\n  }\n  getMass() {\n    return this.getRadius() ** squareExp * Math.PI * half;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _this$bubble$radius;\n    return (_this$bubble$radius = this.bubble.radius) !== null && _this$bubble$radius !== void 0 ? _this$bubble$radius : this.size.value;\n  }\n  getStrokeColor() {\n    var _this$bubble$color2;\n    return this._getRollColor((_this$bubble$color2 = this.bubble.color) !== null && _this$bubble$color2 !== void 0 ? _this$bubble$color2 : getHslFromAnimation(this.strokeColor));\n  }\n  init(id, position, overrideOptions, group) {\n    var _effectData$fill, _effectData$close, _shapeData$fill, _shapeData$close, _effectDrawer, _shapeDrawer, _shapeDrawer2, _effectDrawer2, _effectDrawer2$partic, _shapeDrawer3, _shapeDrawer3$particl;\n    const container = this.container,\n      engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.effectClose = true;\n    this.effectFill = true;\n    this.shapeClose = true;\n    this.shapeFill = true;\n    this.pathRotation = false;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.isRotating = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = ParticleOutType.normal;\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      {\n        reduceDuplicates\n      } = particlesOptions,\n      effectType = particlesOptions.effect.type,\n      shapeType = particlesOptions.shape.type;\n    this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const effectOptions = particlesOptions.effect,\n      shapeOptions = particlesOptions.shape;\n    if (overrideOptions) {\n      var _overrideOptions$effe, _overrideOptions$shap;\n      if ((_overrideOptions$effe = overrideOptions.effect) !== null && _overrideOptions$effe !== void 0 && _overrideOptions$effe.type) {\n        const overrideEffectType = overrideOptions.effect.type,\n          effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n        if (effect) {\n          this.effect = effect;\n          effectOptions.load(overrideOptions.effect);\n        }\n      }\n      if ((_overrideOptions$shap = overrideOptions.shape) !== null && _overrideOptions$shap !== void 0 && _overrideOptions$shap.type) {\n        const overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n    }\n    if (this.effect === randomString) {\n      const availableEffects = [...this.container.effectDrawers.keys()];\n      this.effect = availableEffects[Math.floor(Math.random() * availableEffects.length)];\n    }\n    if (this.shape === randomString) {\n      const availableShapes = [...this.container.shapeDrawers.keys()];\n      this.shape = availableShapes[Math.floor(Math.random() * availableShapes.length)];\n    }\n    this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n    this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    const effectData = this.effectData;\n    if (effectData) {\n      particlesOptions.load(effectData.particles);\n    }\n    const shapeData = this.shapeData;\n    if (shapeData) {\n      particlesOptions.load(shapeData.particles);\n    }\n    const interactivity = new Interactivity(engine, container);\n    interactivity.load(container.actualOptions.interactivity);\n    interactivity.load(particlesOptions.interactivity);\n    this.interactivity = interactivity;\n    this.effectFill = (_effectData$fill = effectData === null || effectData === void 0 ? void 0 : effectData.fill) !== null && _effectData$fill !== void 0 ? _effectData$fill : particlesOptions.effect.fill;\n    this.effectClose = (_effectData$close = effectData === null || effectData === void 0 ? void 0 : effectData.close) !== null && _effectData$close !== void 0 ? _effectData$close : particlesOptions.effect.close;\n    this.shapeFill = (_shapeData$fill = shapeData === null || shapeData === void 0 ? void 0 : shapeData.fill) !== null && _shapeData$fill !== void 0 ? _shapeData$fill : particlesOptions.shape.fill;\n    this.shapeClose = (_shapeData$close = shapeData === null || shapeData === void 0 ? void 0 : shapeData.close) !== null && _shapeData$close !== void 0 ? _shapeData$close : particlesOptions.shape.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    container.retina.initParticle(this);\n    this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this._initPosition(position);\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const decayOffset = 1;\n    this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n    const particles = container.particles;\n    particles.setLastZIndex(this.position.z);\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let effectDrawer = container.effectDrawers.get(this.effect);\n    if (!effectDrawer) {\n      effectDrawer = this._engine.getEffectDrawer(this.effect);\n      if (effectDrawer) {\n        container.effectDrawers.set(this.effect, effectDrawer);\n      }\n    }\n    if ((_effectDrawer = effectDrawer) !== null && _effectDrawer !== void 0 && _effectDrawer.loadEffect) {\n      effectDrawer.loadEffect(this);\n    }\n    let shapeDrawer = container.shapeDrawers.get(this.shape);\n    if (!shapeDrawer) {\n      shapeDrawer = this._engine.getShapeDrawer(this.shape);\n      if (shapeDrawer) {\n        container.shapeDrawers.set(this.shape, shapeDrawer);\n      }\n    }\n    if ((_shapeDrawer = shapeDrawer) !== null && _shapeDrawer !== void 0 && _shapeDrawer.loadShape) {\n      shapeDrawer.loadShape(this);\n    }\n    const sideCountFunc = (_shapeDrawer2 = shapeDrawer) === null || _shapeDrawer2 === void 0 ? void 0 : _shapeDrawer2.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n    for (const updater of particles.updaters) {\n      updater.init(this);\n    }\n    for (const mover of particles.movers) {\n      var _mover$init;\n      (_mover$init = mover.init) === null || _mover$init === void 0 || _mover$init.call(mover, this);\n    }\n    (_effectDrawer2 = effectDrawer) === null || _effectDrawer2 === void 0 || (_effectDrawer2$partic = _effectDrawer2.particleInit) === null || _effectDrawer2$partic === void 0 || _effectDrawer2$partic.call(_effectDrawer2, container, this);\n    (_shapeDrawer3 = shapeDrawer) === null || _shapeDrawer3 === void 0 || (_shapeDrawer3$particl = _shapeDrawer3.particleInit) === null || _shapeDrawer3$particl === void 0 || _shapeDrawer3$particl.call(_shapeDrawer3, container, this);\n    for (const [, plugin] of container.plugins) {\n      var _plugin$particleCreat;\n      (_plugin$particleCreat = plugin.particleCreated) === null || _plugin$particleCreat === void 0 || _plugin$particleCreat.call(plugin, this);\n    }\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size,\n      position = this.position;\n    return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    for (const updater of this.container.particles.updaters) {\n      var _updater$reset;\n      (_updater$reset = updater.reset) === null || _updater$reset === void 0 || _updater$reset.call(updater, this);\n    }\n  }\n}","map":{"version":3,"names":["Vector","Vector3d","calcExactPositionOrRandomFromSize","clamp","degToRad","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeValue","randomInRange","setRangeValue","deepExtend","getPosition","initParticleNumericAnimationValue","isInArray","itemFromSingleOrMultiple","errorPrefix","millisecondsToSeconds","getHslFromAnimation","rangeColorToRgb","EventType","Interactivity","MoveDirection","OutMode","ParticleOutType","PixelMode","alterHsl","loadParticlesOptions","defaultRetryCount","double","half","squareExp","randomString","loadEffectData","effect","effectOptions","id","reduceDuplicates","effectData","options","close","fill","loadShapeData","shape","shapeOptions","shapeData","fixOutMode","data","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","container","_this","_calcPosition","position","zIndex","_outModes$left","_outModes$right","_outModes$top","_outModes$bottom","tryCount","arguments","length","undefined","plugin","plugins","pluginPos","particlePosition","create","x","y","canvasSize","canvas","size","exactPosition","pos","getRadius","outModes","move","fixHorizontal","bounce","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","increment","_calculateVelocity","baseVelocity","direction","res","copy","moveOptions","inside","outside","rad","angle","radOffset","offset","range","straight","random","speed","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","minRetries","Error","concat","particles","find","particle","_getRollColor","color","_this$roll$angle","roll","backColor","alter","rollFactor","none","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","type","_initPosition","_this$options$move$ce","_this$options$move$ce2","zIndexValue","minZ","zLayers","initialPosition","defaultRadius","moveCenter","center","mode","percent","outType","origin","_engine","destroy","override","_shapeDrawer$particle","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","particleDestroy","call","_plugin$particleDestr","particleDestroyed","updater","updaters","_updater$particleDest","reset","dispatchEvent","draw","delta","drawParticlePlugin","drawParticle","getFillColor","_this$bubble$color","getMass","z","_this$bubble$radius","getStrokeColor","_this$bubble$color2","strokeColor","init","overrideOptions","group","_effectData$fill","_effectData$close","_shapeData$fill","_shapeData$close","_effectDrawer","_shapeDrawer","_shapeDrawer2","_effectDrawer2","_effectDrawer2$partic","_shapeDrawer3","_shapeDrawer3$particl","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","isRotating","rotation","misplaced","retina","maxDistance","normal","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","effectType","shapeType","_overrideOptions$effe","_overrideOptions$shap","overrideEffectType","load","overrideShapeType","availableEffects","effectDrawers","keys","availableShapes","interactivity","pathOptions","path","pathDelay","delay","generator","getPathGenerator","addPath","initParticle","factor","initialVelocity","velocity","decayOffset","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","_mover$init","particleInit","_plugin$particleCreat","particleCreated","isInsideCanvas","isVisible","_updater$reset"],"sources":["/Users/nero/Desktop/local_workspace/p_website/node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { MoveDirection } from \"../Enums/Directions/MoveDirection.js\";\nimport { OutMode } from \"../Enums/Modes/OutMode.js\";\nimport { ParticleOutType } from \"../Enums/Types/ParticleOutType.js\";\nimport { PixelMode } from \"../Enums/Modes/PixelMode.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2, randomString = \"random\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [OutMode.bounce],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [OutMode.bounce],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === MoveDirection.inside || moveOptions.direction === MoveDirection.outside) {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = color => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = position => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? PixelMode.percent,\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case MoveDirection.inside:\n                    this.outType = ParticleOutType.inside;\n                    break;\n                case MoveDirection.outside:\n                    this.outType = ParticleOutType.outside;\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(EventType.particleDestroyed, {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.isRotating = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = ParticleOutType.normal;\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), { reduceDuplicates } = particlesOptions, effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        if (this.effect === randomString) {\n            const availableEffects = [...this.container.effectDrawers.keys()];\n            this.effect = availableEffects[Math.floor(Math.random() * availableEffects.length)];\n        }\n        if (this.shape === randomString) {\n            const availableShapes = [...this.container.shapeDrawers.keys()];\n            this.shape = availableShapes[Math.floor(Math.random() * availableShapes.length)];\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            mover.init?.(this);\n        }\n        effectDrawer?.particleInit?.(container, this);\n        shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}