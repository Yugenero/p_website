/*! For license information please see tsparticles.shape.rounded-rect.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],t);else{var o="object"==typeof exports?t(require("@tsparticles/engine")):t(e.window);for(var r in o)("object"==typeof exports?exports:e)[r]=o[r]}}(this,(e=>(()=>{var t={303:t=>{t.exports=e}},o={};function r(e){var i=o[e];if(void 0!==i)return i.exports;var n=o[e]={exports:{}};return t[e](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{r.r(i),r.d(i,{loadRoundedRectShape:()=>n});var e=r(303);const t=Math.sqrt(2);class o{constructor(){this.validTypes=["rounded-rect"]}draw(e){const{context:o,particle:r,radius:i}=e,n=i/t,a=2*n,d=r.borderRadius??5;"roundRect"in o?o.roundRect(-n,-n,a,a,d):function(e,t,o,r){const i={x:-t,y:-t,height:o,width:o},n=r,a=r,d=r,s=r,{x:c,y:u,width:p,height:l}=i,f=c+p,y=u+l;e.moveTo(c+n,u),e.lineTo(f-a,u),e.quadraticCurveTo(f,u,f,u+a),e.lineTo(f,u+l-s),e.quadraticCurveTo(f,y,f-s,y),e.lineTo(c+d,y),e.quadraticCurveTo(c,y,c,y-d),e.lineTo(c,u+n),e.quadraticCurveTo(c,u,c+n,u)}(o,n,a,d)}particleInit(t,o){const r=o.shapeData;o.borderRadius=(0,e.getRangeValue)(r?.radius??5)*t.retina.pixelRatio}}async function n(e,t=!0){await e.addShape(new o,t)}})(),i})()));